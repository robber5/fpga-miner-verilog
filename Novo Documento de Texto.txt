
https://github.com/MichalKs/FPGA_LED/blob/master/src/counter.v



/* clock related fixed parameter */
parameter CLK_HALF_PERIOD = 2;
parameter CLK_PERIOD = 2 * CLK_HALF_PERIOD;

/* definition of the state for the state machine */
parameter STATE_IDLE = 0;
parameter STATE_FIRST_BLOCK = 1;
parameter STATE_SECOND_BLOCK = 2;
parameter STATE_HASH_OF_HASH = 3;
parameter STATE_COMPARING_HASHES = 4;
parameter STATE_INCREASE_NONCE = 5;
parameter STATE_GOLDEN_NONCE_FOUND = 6;

/* sha global definition */
reg sha_init;
reg sha_mode;
reg sha_next;
reg sha_reset;

/* sha instance #1 */
reg [511:0] sha_1_block;
wire [0:255] sha_1_digest;
wire sha_1_digest_valid;
wire sha_1_ready;

/* nonces */
reg [31:0] sha_1_nonce;

/* dificult */
reg [255:0] dificult;
  
/* global machine state */
reg [31:0] global_state = STATE_IDLE;

/* hard coded blocks to be computed */
reg [511:0] blk1;
reg [95:0] blk2;

/* counter to be used as part of developer process */
reg [31:0] counter_out = 0;


function [1:0] compare;
  input [255:0] hash;
  input [255:0] dificult;
  reg [255:0] hash_i;
  begin
    hash_i[255:248] = hash[7:0];
    hash_i[247:240] = hash[15:8];
    hash_i[239:232] = hash[23:16];
    hash_i[231:224] = hash[31:24];
    hash_i[223:216] = hash[39:32];
    hash_i[215:208] = hash[47:40];
    hash_i[207:200] = hash[55:48];
    hash_i[199:192] = hash[63:56];
    hash_i[191:184] = hash[71:64];
    hash_i[183:176] = hash[79:72];
    hash_i[175:168] = hash[87:80];
    hash_i[167:160] = hash[95:88];
    hash_i[159:152] = hash[103:96];
    hash_i[151:144] = hash[111:104];
    hash_i[143:136] = hash[119:112];
    hash_i[135:128] = hash[127:120];
    hash_i[127:120] = hash[135:128];
    hash_i[119:112] = hash[143:136];
    hash_i[111:104] = hash[151:144];
    hash_i[103:96] = hash[159:152];
    hash_i[95:88] = hash[167:160];
    hash_i[87:80] = hash[175:168];
    hash_i[79:72] = hash[183:176];
    hash_i[71:64] = hash[191:184];
    hash_i[63:56] = hash[199:192];
    hash_i[55:48] = hash[207:200];
    hash_i[47:40] = hash[215:208];
    hash_i[39:32] = hash[223:216];
    hash_i[31:24] = hash[231:224];
    hash_i[23:16] = hash[239:232];
    hash_i[15:8] = hash[247:240];
    hash_i[7:0] = hash[255:248];

    //$display("::: 0x%064x", hash_i);
    //$display("::: 0x%064x", dificult);
    //$display("::: 0x%d", hash_i < dificult);

    compare = hash_i < dificult;
  end
endfunction


task reset_sha();
begin
  /* reset sha #n */
  sha_mode = 1;

  /* reset sha #1 */
  sha_reset = 1;
  sha_init = 0;
  sha_next = 0;
  sha_1_block = 512'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  sha_reset = 0;
  #(4 * CLK_HALF_PERIOD);
  sha_reset = 1;
  sha_1_nonce = 32'h1DAC2B6A; // 7C
end
endtask


task reset_all();
begin
  reset_sha();
  global_state = STATE_IDLE;
  dificult = 255'h0;
  //led_status <= 0;
end
endtask


task compute_hash_of_hash();
begin
  //$display(" ** computing second hash....");

end
endtask


task compute_sha_1st_block();
begin
  //$display(" ** computing frist block....");

end
endtask


task compute_sha_2nd_block();
begin

end
endtask


task compare_hashes();
begin

end
endtask


task increase_nonces();
begin

end
endtask


always @ (posedge clock)
begin : COUNTER

  //led_reset <= 1'b1;
  //led[0] <= 1'b1;
  //if (reset == 1'b0) begin
  //  counter_out <= #1 0;
    //reset_all();
	 //led_reset_status <= 1;
//	 $display("reset.");
  //end
  //else begin
    counter_out <= #1 counter_out + 1;
  //end

  /* reset on start */
  //if (global_state == STATE_GOLDEN_NONCE_FOUND) begin
  //  $display("Golden nonce found");
  //end

  if (counter_out == 10) begin
	 blk1 = 512'h0100000000000000000000000000000000000000000000000000000000000000000000003BA3EDFD7A7B12B27AC72C3E67768F617FC81BC3888A51323A9FB8AA;
	 blk2 = 96'h4B1E5E4A29AB5F49FFFF001D;

    global_state = STATE_FIRST_BLOCK;
    sha_1_block = blk1;
    sha_init = 1;
    #(CLK_PERIOD);
    sha_init = 0;
    led[6] <= 1'b1;  
  end
  if (sha_1_ready && sha_1_digest_valid && global_state == STATE_FIRST_BLOCK) begin
    //$display("Got first  block: 0x%064x", sha_1_digest);
    //compute_sha_2nd_block();
    //$display(" ** computing second block....");
    global_state = STATE_SECOND_BLOCK;
    sha_1_block = {blk2, sha_1_nonce, 384'h800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000280};
    sha_next = 1;
    dificult = {blk2[15:8], blk2[23:16], blk2[31:24]} * 2 ** (8*(blk2[7:0]-3));
    //$display(" ** dificult....dd  0x%x", dificult);
    #(CLK_PERIOD);
    sha_next = 0;
    #(CLK_PERIOD * 2);
  end
  if (sha_1_ready && sha_1_digest_valid && global_state == STATE_SECOND_BLOCK) begin
    //$display("Got second block: 0x%064x", sha_1_digest);
    //compute_hash_of_hash();
	 global_state = STATE_HASH_OF_HASH;
  
    sha_1_block = {sha_1_digest, 256'h8000000000000000000000000000000000000000000000000000000000000100};
    sha_init = 1;
    #(CLK_PERIOD);
    sha_init = 0;
    #(CLK_PERIOD * 2);
  end
  if (sha_1_ready && sha_1_digest_valid && global_state == STATE_HASH_OF_HASH) begin
    $display("Got second hash: 0x%064x", sha_1_digest);
    //compare_hashes();
    global_state = STATE_COMPARING_HASHES;
  
    if (compare(sha_1_digest, dificult) == 1'b1) begin
	   global_state = STATE_GOLDEN_NONCE_FOUND;
	   $display("Golden nonce found");
	   led[6] <= 1'b1;
    end
    else begin
      global_state = STATE_COMPARING_HASHES;

      sha_1_nonce = sha_1_nonce + 1;
      #2
	 global_state = STATE_FIRST_BLOCK;
    sha_1_block = blk1;
    sha_init = 1;
    #(CLK_PERIOD);
    sha_init = 0;

    end
  end
  //$display("Counter: 0x%04x", counter_out); 
end

/*
always @ (posedge reset)
begin
  if (reset == 1'b1) begin
    led_reset <= 1'b1;
  end
  else begin
    led_reset <= 1'b0;
  end
end
*/